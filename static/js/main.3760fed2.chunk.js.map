{"version":3,"sources":["img/abds.jpg","serviceWorker.js","style.js","friends/abds/style.js","friends/abds/components/banner.js","friends/abds/components/header.js","friends/abds/index.js","app.js","global.css.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","StyledApp","styled","div","theme","StyledHeader","header","Title","h1","Container","StyledBanner","figure","ImgContainer","Img","img","Name","h2","Caption","figcaption","Job","h3","About","p","Banner","src","abds","alt","Header","Abds","useEffect","document","title","App","createGlobalStyle","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0EAAAA,EAAOC,QAAU,IAA0B,kC,+GCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uFChBC,IAAMC,EAAYC,IAAOC,IAAV,K,onECAtB,IAAMC,EAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,WAE9CC,EAAeH,IAAOI,OAAV,IAGdF,EAAM,IAGJG,EAAQL,IAAOM,GAAV,KAKLC,EAAYP,IAAOC,IAAV,KAKTO,EAAeR,IAAOS,OAAV,KAMZC,EAAeV,IAAOC,IAAV,IAEcC,EAAM,GAerBA,EAAM,GASNA,EAAM,IAcjBS,EAAMX,IAAOY,IAAV,KAOHC,EAAOb,IAAOc,GAAV,IAcsCZ,EAAM,IAShDa,EAAUf,IAAOgB,WAAV,KAIPC,EAAMjB,IAAOkB,GAAV,KAKHC,EAAQnB,IAAOoB,EAAV,K,iBC3EHC,EAlBA,WACb,OACE,kBAACb,EAAD,KACE,kBAACE,EAAD,KACE,kBAACC,EAAD,CAAKW,IAAKC,IAAMC,IAAI,aACpB,kBAACX,EAAD,kBAGF,kBAACE,EAAD,KACE,kBAACE,EAAD,eACA,kBAACE,EAAD,oECFOM,EAZA,WACb,OACE,kBAACtB,EAAD,KACE,kBAACE,EAAD,aAEA,kBAACE,EAAD,KACE,kBAAC,EAAD,SCCOmB,EAZF,WAKX,OAJAC,qBAAU,WACRC,SAASC,MAAQ,UAChB,IAGD,oCACE,kBAAC,EAAD,QCISC,EARH,WACV,OACE,kBAAC/B,EAAD,KACE,kBAAC,EAAD,Q,wVCPSgC,kBAAf,KCIAC,IAASC,OACP,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFL,SAASM,eAAe,SRwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3760fed2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/abds.c8da9bc7.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled from 'styled-components';\r\n\r\nexport const StyledApp = styled.div``;","import styled from 'styled-components';\r\n\r\nconst theme = ['#D4CEC2', '#B2AFA9', '#462A1B', '#121210', '#B45122'];\r\n\r\nexport const StyledHeader = styled.header`\r\n  font-family: 'Marck Script', cursive;\r\n  padding: 3rem 0;\r\n  color: ${theme[3]};\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  position: absolute;\r\n  left: -500rem;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  max-width: 65rem;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const StyledBanner = styled.figure`\r\n  margin: 0;\r\n\r\n  display: flex;\r\n`;\r\n\r\nexport const ImgContainer = styled.div`\r\n  width: 25rem;\r\n  background: linear-gradient(90deg, ${theme[0]} 0%, rgba(255,255,255,1) 100%);\r\n  position: relative;\r\n\r\n  &::before,\r\n  &::after {\r\n    content: '';\r\n    position: absolute;\r\n  }\r\n\r\n  &::before {\r\n    z-index: -2;\r\n    top: -1rem;\r\n    left: -1rem;\r\n    bottom: 1rem;\r\n    right: 1rem;\r\n    background-color: ${theme[2]};\r\n  }\r\n\r\n  &::after {\r\n    z-index: -1;\r\n    top: -.5rem;\r\n    left: 1rem;\r\n    bottom: .5rem;\r\n    right: -.5rem;\r\n    background-color: ${theme[4]};\r\n  }\r\n\r\n  &:hover {\r\n    img {\r\n      clip-path: polygon(0% 0%, 100% 0%, 100% 50%, 100% 100%, 0% 100%)\r\n    }\r\n\r\n    h2::before {\r\n      clip-path: circle(100%);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Img = styled.img`\r\nmax-width: 100%;\r\nvertical-align: top;\r\nclip-path: polygon(44% 5%, 83% 21%, 78% 70%, 21% 65%, 16% 31%);\r\ntransition: clip-path .4s ease-in-out;\r\n`;\r\n\r\nexport const Name = styled.h2`\r\nfont-size: 2.5rem;\r\nmargin: 0;\r\nposition: absolute;\r\nz-index: 1;\r\nbottom: -1.8rem;\r\nleft: 2rem;\r\nfont-weight: 400;\r\n\r\n&::before {\r\n  content: '';\r\n  position: absolute;\r\n  width: 12rem;\r\n  height: 2.5rem;\r\n  background: linear-gradient(90deg, transparent 0%, ${theme[4]} 100%);\r\n  z-index: -1;\r\n  right: -2rem;\r\n  top: -.5rem;\r\n  clip-path: circle(8% at 94%);\r\n  transition: clip-path .4s ease-in-out;\r\n}\r\n`;\r\n\r\nexport const Caption = styled.figcaption`\r\n  margin-left: 8rem;\r\n`;\r\n\r\nexport const Job = styled.h3`\r\n  font-size: 2rem;\r\n  margin: 0;\r\n`;\r\n\r\nexport const About = styled.p`\r\n  font-size: 1.2rem;\r\n`;","import React from 'react';\r\nimport { \r\n  StyledBanner,\r\n  ImgContainer,\r\n  Img,\r\n  Name,\r\n  Caption,\r\n  Job,\r\n  About\r\n} from '../style';\r\nimport abds from '../../../img/abds.jpg';\r\n\r\nconst Banner = () => {\r\n  return (\r\n    <StyledBanner>\r\n      <ImgContainer>\r\n        <Img src={abds} alt=\"Abdullah\" />\r\n        <Name>A. Bhnas</Name>\r\n      </ImgContainer>\r\n\r\n      <Caption>\r\n        <Job>Writer</Job>\r\n        <About>\r\n          Known for the famous \"Raining Amazon Rainforests\" novel.\r\n        </About>\r\n      </Caption>\r\n    </StyledBanner>\r\n  );\r\n}\r\n\r\nexport default Banner;","import React from 'react';\r\nimport { \r\n  StyledHeader,\r\n  Container,\r\n  Title\r\n} from '../style';\r\nimport Banner from './banner';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <StyledHeader>\r\n      <Title>Abds</Title>\r\n      \r\n      <Container>\r\n        <Banner />\r\n      </Container>\r\n    </StyledHeader>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { useEffect } from 'react';\r\nimport Header from './components/header';\r\n\r\nconst Abds = () => {\r\n  useEffect(function setDocumentTitle() {\r\n    document.title = 'bhnas';\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Abds;","import React from 'react';\nimport { \n  StyledApp\n} from './style';\nimport Abds from './friends/abds';\n\nconst App = () => {\n  return (\n    <StyledApp>\n      <Abds />\n    </StyledApp>\n  );\n}\n\nexport default App;\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  body {\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\r\n    color: #121210;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './app';\nimport GlobalStyles from './global.css';\n\nReactDOM.render(\n  <>\n    <GlobalStyles />\n    <App />\n  </>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}